import re
from langchain.load import dumps, loads


def split_think_and_answer(response):
    """
    Splits the response into the "thinking" part and the final answer.
    Args:
        response (str): The response string containing the thinking and answer parts.
    Returns:
        str: The final answer part after the thinking section.
    """
    match = re.search(r"</think>\s*(.*)", response, re.DOTALL)
    return match.group(1).strip() if match else response.strip()


def get_thought(response):
    """
    Extracts the "thinking" part from the response.
    Args:
        response (str): The response string containing the thinking part.
    Returns:
        str: The extracted thinking part, or None if not found.
    """
    match = re.search(r"<think>(.*?)</think>", response, re.DOTALL)
    return match.group(1).strip() if match else None


def remove_think_blocks(text):
    """
    Removes all <think>...</think> blocks from the given text.

    This function identifies and removes any content enclosed within <think>...</think> tags,
    including the tags themselves. It is useful for cleaning up text responses that contain
    meta-thinking or reasoning blocks generated by AI models.

    Args:
        text (str): The input text containing <think>...</think> blocks.

    Returns:
        str: The cleaned text with all <think>...</think> blocks removed.

    Example:
        >>> text = "Here is some content. <think>Reasoning process...</think> Final answer."
        >>> cleaned_text = remove_think_blocks(text)
        >>> print(cleaned_text)
        "Here is some content. Final answer."

    Note:
        - The function uses a regular expression with the `re.DOTALL` flag to match multiline
          content inside <think>...</think> tags.
        - If no <think>...</think> blocks are found, the original text is returned unchanged.
    """
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL).strip()


# Function to make a single list of the retrieved documents
def get_unique_union(documents: list[list]):
    """
    Combines multiple lists of documents into a single list with unique documents.

    This function takes a list of document lists (typically from multiple retrieval queries),
    flattens them into a single list, removes duplicates, and returns the unique documents.
    It uses LangChain's dumps/loads functions to serialize and deserialize documents for
    comparison and deduplication.

    Args:
        documents (list[list]): A list containing multiple lists of document objects.
                               Each inner list typically represents results from a different
                               retrieval query or search operation.

    Returns:
        list: A flattened list containing unique document objects with duplicates removed.
              The order of documents may not be preserved due to set operations.
    """
    # Flatten list of lists, and convert each Document to string
    flattened_docs = [dumps(doc) for sublist in documents for doc in sublist]
    # Get unique documents
    unique_docs = list(set(flattened_docs))
    # Return
    return [loads(doc) for doc in unique_docs]


def remove_details_blocks(text):
    """
    Removes all <details>...</details> blocks from the given text.

    This function identifies and removes any content enclosed within <details>...</details> tags,
    including the tags themselves. It is designed to handle nested tags and multiline content,
    ensuring that all <details> blocks are completely removed from the input text.

    Args:
        text (str): The input text containing <details>...</details> blocks.

    Returns:
        str: The cleaned text with all <details>...</details> blocks removed.

    Example:
        >>> text = "Here is some content. <details><summary>Summary</summary>Nested content</details> Final answer."
        >>> cleaned_text = remove_details_blocks(text)
        >>> print(cleaned_text)
        "Here is some content. Final answer."

    Note:
        - The function uses a regular expression with the `re.DOTALL` flag to match multiline
          content inside <details>...</details> tags.
        - If no <details>...</details> blocks are found, the original text is returned unchanged.
        - This is useful for cleaning up text responses that include collapsible sections or
          metadata generated by AI models.
    """
    return re.sub(r"<details[\s\S]*?</details>", "", text, flags=re.DOTALL).strip()
